#pragma once
#include "CItemInfoVtbl.h"
#include "ZXString.h"
#include "ZList.h"
#include "ZArray.h"
#include "ZMap.h"
#include "ZRef.h"
#include "ZFatalSection.h"
#include "Ztl_bstr_t.h"
#include "Point.h"
#include "UINT128.h"

/*
00000000 CItemInfo       struc ; (sizeof=0x298, align=0x4, copyof_5885)
00000000 vfptr           dd ?                    ; offset
00000004 m_mItemCRC      ZMap<long,unsigned long,long> ?
0000001C m_mQuestDeliveryItem ZMap<long,ZRef<CItemInfo::QUESTDELIVERYITEM>,long> ?
00000034 m_lock          ZFatalSection ?
0000003C m_mEquipItem    ZMap<long,ZRef<CItemInfo::EQUIPITEM>,long> ?
00000054 m_mBundleItem   ZMap<long,ZRef<CItemInfo::BUNDLEITEM>,long> ?
0000006C m_mItemString   ZMap<long,ZMap<char const *,ZXString<char>,ZXString<char> >,long> ?
00000084 m_mMapString    ZMap<unsigned long,ZMap<char const *,ZXString<char>,ZXString<char> >,unsigned long> ?
0000009C m_mSetItemInfo  ZMap<long,ZRef<CItemInfo::SETITEMINFO>,long> ?
000000B4 m_mPetFoodItem  ZMap<long,ZRef<CItemInfo::PETFOODITEM>,long> ?
000000CC m_mBridleItem   ZMap<long,ZRef<CItemInfo::BRIDLEITEM>,long> ?
000000E4 m_mLotteryItem  ZMap<long,ZRef<CItemInfo::LOTTERYITEM>,long> ?
000000FC m_mExtendExpireDateItem ZMap<long,ZRef<CItemInfo::EXTENDEXPIREDATEITEM>,long> ?
00000114 m_mExpiredProtectingItem ZMap<long,ZRef<CItemInfo::EXPIREDPROTECTINGITEM>,long> ?
0000012C m_mProtectOnDieItem ZMap<long,ZRef<CItemInfo::PROTECTONDIEITEM>,long> ?
00000144 m_mKarmaScissorsItem ZMap<long,ZRef<CItemInfo::KARMASCISSORSITEM>,long> ?
0000015C m_lHalloweenItem ZList<long> ?
00000170 m_mAreaBuffItem ZMap<long,ZRef<CItemInfo::AREABUFFITEM>,long> ?
00000188 m_mIncLevelItem ZMap<long,ZRef<CItemInfo::INCLEVELITEM>,long> ?
000001A0 m_mGachaponItemInfo ZMap<long,ZRef<CItemInfo::GACHAPONITEMINFO>,long> ?
000001B8 m_pItemShadow   _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001BC m_pCashIcon     _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001C0 m_pCashIconForPrepaidCashItems _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001C4 m_pProtectedIcon _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001C8 m_pQualityIcon_bad _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001CC m_pQualityIcon_good _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001D0 m_pQualityIcon_veryGood _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001D4 m_pQualityIcon_premium _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001D8 m_pQualityIcon_excellent _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001DC m_pQualityIcon_special _com_ptr_t<_com_IIID<IWzCanvas,&_GUID_7600dc6c_9328_4bff_9624_5b0f5c01179e> > ?
000001E0 m_mNPTItemException ZMap<long,long,long> ?
000001F8 m_mCoupleChairItem ZMap<long,ZRef<CItemInfo::COUPLECHAIRITEM>,long> ?
00000210 m_lSetItemEffect ZList<CItemInfo::SET_EFFECT> ?
00000224 m_mNoScanItem   ZMap<long,int,long> ?
0000023C m_lItemNameforScanner ZList<ZRef<ITEMNAME> > ?
00000250 m_mDamageModifiedByUpgrade ZMap<ZXString<char>,ZRef<DamageModifiedInfo>,ZXString<char> > ?
00000268 m_mEquipAffectDamageModifier ZMap<long,ZRef<ZArray<ZXString<char> > >,long> ?
00000280 m_mMonsterAffectDamageModifier ZMap<long,ZXString<char>,long> ?
00000298 CItemInfo       ends
*/
class CItemInfo
{
	/*
	00000000 CItemInfo::QUESTDELIVERYITEM struc ; (sizeof=0x34, align=0x4, copyof_5627)
	00000000 nItemID         dd ?
	00000004 nType           dd ?
	00000008 sEffect         ZXString<char> ?
	0000000C lDisallowComplete ZList<unsigned short> ?
	00000020 lDisallowAccept ZList<unsigned short> ?
	00000034 CItemInfo::QUESTDELIVERYITEM ends
	*/
	struct QUESTDELIVERYITEM
	{
		int nItemID;
		int nType;
		ZXString<char> sEffect;
		ZList<unsigned short> lDisallowComplete;
		ZList<unsigned short> lDisallowAccept;
	};

	/*
	* Autogenerated by IdaParser on: 7/27/2021 7:42:41 PM
	*/
	struct LevelInfo
	{
		int nExpRate;
		ZList<ZRef<RandomStat>> lpIncStat;
		ZMap<long, ZRef<Ability>, long> mpAbility;
	};

	/*
	* Autogenerated by IdaParser on: 7/27/2021 7:39:45 PM
	*/
	struct ItemSkill
	{
		int nSkillID;
		int nSkillLevel;
	};

	/*
	* Autogenerated by IdaParser on: 7/27/2021 7:24:05 PM
	*/
	struct EQUIPITEM
	{
		/*
		* Autogenerated by IdaParser on: 7/27/2021 7:34:20 PM
		*/
		struct ADDITION
		{
			ZRef<Additional::TCond<Additional::SKILL>> pSkill;
			ZRef<Additional::TCond<Additional::MOBCATEGORY>> pMobCategory;
			ZRef<Additional::TCond<Additional::ELEMBOOST>> pElemBoost;
			ZRef<Additional::TCond<Additional::CRITICAL>> pCritical;
			ZRef<Additional::TCond<Additional::BOSS>> pBoss;
			ZRef<Additional::TCond<Additional::MOBDIE>> pMobDie;
			ZRef<Additional::TCond<Additional::HPMPCHANGE>> pHpMpChange;
		};

		int _ZtlSecureTear_nItemID[2];
		unsigned int _ZtlSecureTear_nItemID_CS;
		bool bTimeLimited;
		ZXString<char> sItemName;
		Ztl_bstr_t bsUOL;
		int _ZtlSecureTear_nrSTR[2];
		unsigned int _ZtlSecureTear_nrSTR_CS;
		int _ZtlSecureTear_nrINT[2];
		unsigned int _ZtlSecureTear_nrINT_CS;
		int _ZtlSecureTear_nrDEX[2];
		unsigned int _ZtlSecureTear_nrDEX_CS;
		int _ZtlSecureTear_nrLUK[2];
		unsigned int _ZtlSecureTear_nrLUK_CS;
		int _ZtlSecureTear_nrPOP[2];
		unsigned int _ZtlSecureTear_nrPOP_CS;
		int _ZtlSecureTear_nrJob[2];
		unsigned int _ZtlSecureTear_nrJob_CS;
		int _ZtlSecureTear_nrLevel[2];
		unsigned int _ZtlSecureTear_nrLevel_CS;
		int _ZtlSecureTear_nrMobLevel[2];
		unsigned int _ZtlSecureTear_nrMobLevel_CS;
		int nReplaceItemID;
		ZXString<char> sReplaceMsg;
		int nReplacePeriod;
		int _ZtlSecureTear_nSellPrice[2];
		unsigned int _ZtlSecureTear_nSellPrice_CS;
		int _ZtlSecureTear_bCash[2];
		unsigned int _ZtlSecureTear_bCash_CS;
		short niMaxHPr;
		short niMaxMPr;
		char _ZtlSecureTear_nRUC[2];
		unsigned int _ZtlSecureTear_nRUC_CS;
		char _ZtlSecureTear_nTUC[2];
		unsigned int _ZtlSecureTear_nTUC_CS;
		short _ZtlSecureTear_niSTR[2];
		unsigned int _ZtlSecureTear_niSTR_CS;
		short _ZtlSecureTear_niDEX[2];
		unsigned int _ZtlSecureTear_niDEX_CS;
		short _ZtlSecureTear_niINT[2];
		unsigned int _ZtlSecureTear_niINT_CS;
		short _ZtlSecureTear_niLUK[2];
		unsigned int _ZtlSecureTear_niLUK_CS;
		short _ZtlSecureTear_niMaxHP[2];
		unsigned int _ZtlSecureTear_niMaxHP_CS;
		short _ZtlSecureTear_niMaxMP[2];
		unsigned int _ZtlSecureTear_niMaxMP_CS;
		short _ZtlSecureTear_niPAD[2];
		unsigned int _ZtlSecureTear_niPAD_CS;
		short _ZtlSecureTear_niMAD[2];
		unsigned int _ZtlSecureTear_niMAD_CS;
		short _ZtlSecureTear_niPDD[2];
		unsigned int _ZtlSecureTear_niPDD_CS;
		short _ZtlSecureTear_niMDD[2];
		unsigned int _ZtlSecureTear_niMDD_CS;
		short _ZtlSecureTear_niACC[2];
		unsigned int _ZtlSecureTear_niACC_CS;
		short _ZtlSecureTear_niEVA[2];
		unsigned int _ZtlSecureTear_niEVA_CS;
		short _ZtlSecureTear_niCraft[2];
		unsigned int _ZtlSecureTear_niCraft_CS;
		short _ZtlSecureTear_niSpeed[2];
		unsigned int _ZtlSecureTear_niSpeed_CS;
		short _ZtlSecureTear_niJump[2];
		unsigned int _ZtlSecureTear_niJump_CS;
		short _ZtlSecureTear_niSwim[2];
		unsigned int _ZtlSecureTear_niSwim_CS;
		short _ZtlSecureTear_niFatigue[2];
		unsigned int _ZtlSecureTear_niFatigue_CS;
		int _ZtlSecureTear_nKnockback[2];
		unsigned int _ZtlSecureTear_nKnockback_CS;
		long double _ZtlSecureTear_dRecovery[2];
		unsigned int _ZtlSecureTear_dRecovery_CS;
		long double _ZtlSecureTear_dFs[2];
		unsigned int _ZtlSecureTear_dFs_CS;
		int _ZtlSecureTear_nSwim[2];
		unsigned int _ZtlSecureTear_nSwim_CS;
		int _ZtlSecureTear_nTamingMob[2];
		unsigned int _ZtlSecureTear_nTamingMob_CS;
		int _ZtlSecureTear_nIUC[2];
		unsigned int _ZtlSecureTear_nIUC_CS;
		char nMinGrade;
		bool bQuest;
		bool bPartyQuest;
		bool bOnly;
		bool bOnlyEquip;
		bool bTradeBlock;
		int nAppliableKarmaType;
		bool bNotSale;
		bool bBigSize;
		bool bExpireOnLogout;
		short nirPoison;
		short nirIce;
		short nirFire;
		short nirLight;
		short nirHoly;
		bool bBindedWhenEquiped;
		unsigned int dwSpecialID;
		bool bNotExtend;
		bool bAccountSharable;
		bool bSharableOnce;
		unsigned int dwAfterimageFlag;
		int nUserInfoScale;
		POINT ptUserInfoDiff;
		UINT128 uPetTemplateFlag;
		unsigned int dwPetAbilityFlag;
		int nNameTag;
		int nChatBalloon;
		ZArray<long> anLevelUpTypePool;
		ZArray<ZRef<LevelInfo>> apLevelInfo;
		bool bEpic;
		int nSetItemID;
		ZXString<char> sDesc;
		ZList<ZRef<ItemSkill>> lpItemSkill;
		ZMap<long, long, long> mSkillLevelBonus;
		ZArray<ZPair<long, long>> aBonusExpRate;
		ZArray<ZPair<long, long>> aPotionDiscountRate;
		ZArray<long> aTamingMobItem;
		ZRef<ADDITION> pAddition;
		int nDurability;
		int nEnchantCategory;
		bool bTransform;
		int nIUCMax;
	};

	/*
	00000000 CItemInfo::BUNDLEITEM struc ; (sizeof=0x80, align=0x8, copyof_5907)
	00000000 sItemName       ZXString<char> ?
	00000004 nItemID         dd ?
	00000008 bTimeLimited    dd ?
	0000000C bOnly           dd ?
	00000010 bTradeBlock     dd ?
	00000014 nAppliableKarmaType dd ?
	00000018 bNotSale        dd ?
	0000001C bBigSize        dd ?
	00000020 bExpireOnLogout dd ?
	00000024 bNoCancelMouse  dd ?
	00000028 nPAD            dd ?
	0000002C nRequiredLEV    dd ?
	00000030 lReqField       ZList<unsigned long> ?
	00000044 nSellPrice      dd ?
	00000048 dSellUnitPrice  dq ?
	00000050 bCash           dd ?
	00000054 bQuest          dd ?
	00000058 bPartyQuest     dd ?
	0000005C nMaxPerSlot     dw ?
	0000005E nMax            dw ?
	00000060 usReqQuestOnProgress dw ?
	00000062                 db ? ; undefined
	00000063                 db ? ; undefined
	00000064 nMCType         dd ?
	00000068 bMonsterBookCard dd ?
	0000006C nReplaceItemID  dd ?
	00000070 sReplaceMsg     ZXString<char> ?
	00000074 nReplacePeriod  dd ?
	00000078 bAccountSharable dd ?
	0000007C                 db ? ; undefined
	0000007D                 db ? ; undefined
	0000007E                 db ? ; undefined
	0000007F                 db ? ; undefined
	00000080 CItemInfo::BUNDLEITEM ends
	*/
	struct BUNDLEITEM
	{
		ZXString<char> sItemName;
		int nItemID;
		bool bTimeLimited;
		bool bOnly;
		bool bTradeBlock;
		int nAppliableKarmaType;
		bool bNotSale;
		bool bBigSize;
		bool bExpireOnLogout;
		bool bNoCancelMouse;
		int nPAD;
		int nRequiredLEV;
		ZList<unsigned long> lReqField;
		int nSellPrice;
		double dSellUnitPrice;
		bool bCash;
		bool bQuest;
		bool bPartyQuest;
		int nMaxPerSlot;
		int nMax;
		unsigned short usReqQuestOnProgress;
		char Unknown1;
		char Unknown2;
		int nMCType;
		bool bMonsterBookCard;
		int nReplaceItemID;
		ZXString <char> sReplaceMsg;
		int nReplacePeriod;
		bool bAccountSharable;
		int Unknown3;
	};

	CItemInfoVtbl* vfptr;
	ZMap<long, unsigned long, long> m_mItemCRC;
	ZMap<long, ZRef<QUESTDELIVERYITEM>, long> m_mQuestDeliveryItem;
	ZFatalSection<void> m_lock;
	ZMap<long, ZRef<EQUIPITEM>, long> m_mEquipItem;
	ZMap<long, ZRef<BUNDLEITEM>, long> m_mBundleItem;
	ZMap<long, ZMap<char const*, ZXString<char>, ZXString<char> >, long> m_mItemString;
	ZMap<unsigned long, ZMap<char const*, ZXString<char>, ZXString<char>>, unsigned long> m_mMapString;
	ZMap<long, ZRef<SETITEMINFO>, long>C m_mSetItemInfo;
	ZMap<long, ZRef<PETFOODITEM>, long> m_mPetFoodItem;
	ZMap<long, ZRef<BRIDLEITEM>, long> m_mBridleItem;
	ZMap<long, ZRef<LOTTERYITEM>, long> m_mLotteryItem;
	ZMap<long, ZRef<EXTENDEXPIREDATEITEM>, long> m_mExtendExpireDateItem;
	ZMap<long, ZRef<EXPIREDPROTECTINGITEM>, long> m_mExpiredProtectingItem;
	ZMap<long, ZRef<PROTECTONDIEITEM>, long> m_mProtectOnDieItem;
	ZMap<long, ZRef<KARMASCISSORSITEM>, long> m_mKarmaScissorsItem;
	ZList<long> m_lHalloweenItem;
	ZMap<long, ZRef<AREABUFFITEM>, long> m_mAreaBuffItem;
	ZMap<long, ZRef<INCLEVELITEM>, long> m_mIncLevelItem;
	ZMap<long, ZRef<GACHAPONITEMINFO>, long> m_mGachaponItemInfo;
	//m_pItemShadow 
	//m_pCashIcon
	//m_pCashIconForPrepaidCashItems
	//m_pProtectedIcon
	//m_pQualityIcon_bad
	//m_pQualityIcon_good
	//m_pQualityIcon_veryGood
	//m_pQualityIcon_premium
	//m_pQualityIcon_excellent
	//m_pQualityIcon_special
	ZMap<long, long, long> m_mNPTItemException;
	ZMap<long, ZRef<COUPLECHAIRITEM>, long> m_mCoupleChairItem;
	ZList<CItemInfo::SET_EFFECT> m_lSetItemEffect;
	ZMap<long, int, long> m_mNoScanItem;
	ZList<ZRef<ITEMNAME>> m_lItemNameforScanner;
	ZMap<ZXString<char>, ZRef<DamageModifiedInfo>, ZXString<char>> m_mDamageModifiedByUpgrade;
	ZMap<long, ZRef<ZArray<ZXString<char>>>, long> m_mEquipAffectDamageModifier;
	ZMap<long, ZXString<char>, long> m_mMonsterAffectDamageModifier;
};